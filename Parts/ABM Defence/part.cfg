PART
{
// Kerbal Space Program - Part Config
// 
// 

// --- general parameters ---
name = sadraXLSR
module = Part
author = Siglor

// --- asset parameters ---
mesh = model.mu
rescaleFactor = 3


// --- node definitions ---
node_attach = 0.0, 0, 0, 0, -1, 0, 0


// --- editor parameters ---
TechRequired = precisionEngineering
entryCost = 2100
cost = 600
category = none
bdacategory = Radar
subcategory = 0
title = SADRA XLSR-1
manufacturer = SADRA Military Technologies
description = The Separate Target Illumination Radar (STIR) can't scan, but it can illuminate one target at the time.
// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 0,1,0,0,1

// --- standard part parameters ---
mass = 1
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.2
angularDrag = 2
crashTolerance = 7
maxTemp = 3600

	MODULE
	{
	name = ModuleTurret
	
	pitchTransformName = pitchTransform
	yawTransformName = yawTransform
	
	pitchSpeedDPS = 720
	yawSpeedDPS = 720
	
	maxPitch = 85
	minPitch = -8
	
	yawRange = 360
	
	smoothRotation = true
	smoothMultiplier = 5
	}

	MODULE
{
        name = ModuleRadar

        // -- Section: General Configuration --
        radarName = SADRA XSLR-1		// if left empty part.title is used, but advised to set this to a nice printable text
        rwrThreatType = 5				// IMPORTANT, please set correctly:
                                // 0 = SAM site radar
                                // 1 = Fighter radar (airborne)
                                // 2 = AWACS radar (airborne)
                                // 3, 4 = ACTIVE MISSILE (DO NOT USE UNLESS YOU KNOW WHAT YOU'RE DOING!
                                // 5 = Detection radar (ground/ship based)
                                // 6 = SONAR (ship/submarine based)
        rotationTransformName = rotationTransform
	    //turretID = 0					// if needed
        resourceDrain = 0.05				// change to higher values for more capable radars, e.g AESA

        // -- Section: Capabilities --
        omnidirectional = true				// false: boresight scan radar
        directionalFieldOfView = 360			// for omni and boresight
        boresightFOV = 360				// for boresight only
        scanRotationSpeed = 2880				// degress per second
        lockRotationSpeed = 2880				// only relevant if canLock
        lockRotationAngle = 360
        showDirectionWhileScan = true			// can show target direction on radar screen. False: radar echos displayed as block only (no direction)
        multiLockFOV = 360				// only relevant if canLock
        lockAttemptFOV = 360				// only relevant if canLock
        maxLocks = 25					//how many targets can be locked/tracked simultaneously. only relevant if canLock

        canScan = true					// scanning/detecting targets (volume search)
        canLock = true					// locking/tracking targets (fire control)
        canTrackWhileScan = true			// continue scanning while tracking a locked target
        canRecieveRadarData = true			// can work as passive data receiver (NOTE THE SPELLING! [SIC])

        minSignalThreshold = 50				// DEPRECATED, NO LONGER USED! use detection float curve!
        minLockedSignalThreshold = 180			// DEPRECATED, NO LONGER USED! use locktrack float curve!

        radarGroundClutterFactor = 0.2			// how much is the radar efficiency reduced to by ground clutter/look-down?
                                // 0.0 = reduced to 0% (=IMPOSSIBLE to detect ground targets)
                                // 1.0 = fully efficient (no difference between air & ground targets)
                                // default if unset: 0.25
                                // Ground targets, especially ships, already have a massively larger RCS than fighters, hence
                                // any ground clutter factor >0.25 is to be considered very good, making an efficient surface/horizon search radar.
                                // values >1.0 are possible, meaning the radar is MORE efficient during look down than vs air targets.

        radarDetectionCurve
        {
          // floatcurve to define at what range (km) which minimum cross section (m^2) can be detected.
          // this defines both min/max range of the radar, and sensitivity/efficiency
          // it is recommended to define an "assured detection range", at which all craft are detected regardless
          //     of their rcs. This is achieved by using a minrcs value of zero, thus detecting everything.
          //        key = distance	rcs
                    key = 0.0	0
                    key = 15	0	//between 0 and 10 km the min cross section is 0, thus assured detection of everything
                    key = 20    0   //
                    key = 30    0  //effective range 20km, can still detect relatively small rcs
                    key = 40    0
                    key = 50    0	//max range 40km, but only for very large rcs
                    key = 100   0
                    key = 200   0
                    key = 400   0
        }

        radarLockTrackCurve
        {
            // same as detectionCurve, just for locking/tracking purpose
            // ATTENTION: DO NOT USE an "assured locking range" here, as this would render lock-breaking
            //   ECM-jammers & chaff completely ineffective!!
            //      key = distance	rcs
                    key = 0.0	0
                    key = 15	0	//between 0 and 10 km the min cross section is 0, thus assured detection of everything
                    key = 20    0   //
                    key = 30    0  //effective range 20km, can still detect relatively small rcs
                    key = 40    0
                    key = 50    0	//max range 40km, but only for very large rcs
                    key = 100   0
                    key = 200   0
                    key = 400   0
        }



}
